# Check out https://docs.codemagic.io/yaml/building-a-react-native-app/ for more information
# Please review and update values

workflows:
    react-native-android:
        name: React Native Android
        max_build_duration: 120
        instance_type: mac_mini
        environment:
            vars:
#                GCLOUD_SERVICE_ACCOUNT_CREDENTIALS: Encrypted(...) # <-- Put encrypted CONTENTS of your Gloud crendentials file here
                PACKAGE_NAME: "com.rn.clirnproject.staging" # <-- Put your package name here e.g. com.domain.myapp
                CM_KEYSTORE: Encrypted(Z0FBQUFBQmdjanFJNXFBN2VwajBELThBZ3RwSnhrR1RpeUVxZFB5T2kxdm1GWU13aVZsTWFlS2ZfcGdqM2NBNXMwcGZMekVOR3l1a056c29fMW5hWVB3eDkxTGJuWEstS0dQdHJvMlg4Q0lfQVl3Zjl1cnpCdER2ejFDV0prLU5aYS1SYVZzZ3BMQngyRC05MnZNZ205ZXlnQ2dhWGU1OG4xaWR2bFl6TnlWd0ZFODFPVU9LdTdVeC16WlIxcVJtNVgyOURMZWZIQlU4cFdPSTJ0Y1NJbFl6Y1lJRlZOcHBoVjVHVUFwa0dvYXJ4MUg0ckpQS3RIdVBMWXVoMy1tS0NiclhfT2twOG9QQ3REcy1TT3BwSnlCandLSWQ0UWhnQm1kdEU3cFYzMjdYbWo3R0ZPbFlYLXZFNEdDX0RKQnJhSnZTZG1fd2FUWHZxLTluWGdneDd1RWVHVHJDcHpQMXJ0Zlo5Y2FRN0daUnFYVE05UjFTU2xkdW1rUmtYaFFyT1hRUGNQZjVPNDRkLW1CU1BoZWJ2ZFhCdmdraG5WZjAyeDRYcFA4NlRRVWxXNHZ6aW1WQVN3czFwWGVZcHVoR095a1cxeVVqNGVZR3pYU3cxakVNX2ROLTRNTW5MQkJWRXdxVXNXOG85WDlMcFNRbUptakJPTFFXNGZiNy0xbG96MFJhQUFZX1k5NHhEcVRRRTQ2Skp6VmVaNXU4dkt3UGZJT2gwdnhoMk00ZW5TM1lKSmUybl9tQ09vMGdoN0o0RVZGQVY0VjBlcXUtWHE4WEdxcGNfNktoaFBJSkhsUG13NzhTZ3p5cG91SXhoVU83VDFVTFh3UFFQWG1LM2g5YVFRZlpOMHhzcXVNdTBnM2taUEtBSlFqNGxYZmFHbDZGR1JZeTlUcnd1UmxON05ibnJTdFdYLVp5WTg4SzBCaUdwZ1JXUWpzYmZQaHliRTMyZUtVcGp1MFc2VWpsRXB2TjZnOEE3b3A2LWI4c052V0JOS1d6R2xmUDNWQnZOR0ZYb2NnU014VWgtT0l6bHVPbmhhQ2p1dmRmV0pXRHBFOVR2M292ODA2d081amVCd3Y2cC1Ca3ZlOUo3RVFvZ3dmbkNQamVwRFBBbFpBVFNBejE0dTd2bkZONmZEcWF4d29CdnZPbnNVbm8yZkJNOGtJbUpTMnVRTUwyMTBpeXlIcHRtaWQ1YVRMRndxZmdzRlB0UHo5WG93OUZUdGJhTGFRNjYwNWpLLWdiUkw0MnQ1cEQyNU9UWnpOb0tMOGdIZGtIUmhRMkprMkU4UUZibGdHX0tlQ1JaUWNFR0tsVW1IMnpLTnhYVFlDNlExcUdfMEhZRVRweWRNUnFXbTYwTk1IVmEyc1U4RXhWd1FXQ3BVeFFndVpBSlZhcS1iTGpqN2lTMGhLaDJQZm9KNTBsYUViaFBiajhNczJDanRJR2tfRkJPWERNbmZOb2o2YXU5MWR1MHQ2OFYzeDNUQjNjWUYwQ2xKMVBIYU0wcmlSSHFHZ2R0U0xyOWxUM3dRbFd5SmV6aVJOOEVROWVBckRCcTlZZi1lTWFIaHpQTVQ4cGlvaDRkSDRsb0NxTFh0TjR6bDdjenZCbGt2TmJqNGZoX3ZBUkhBWmc0c2VERmpJLXh0c25wV1lmNWNPN1g1NmR0Vm44bnQwbTJzRzBfUjVDVTFLd1U5Qm42enZ2Wk9IVlhfelpVS0JHMzZsUlRWdmJ4Z0VkcFhJWlNUU3JVaTRta210M3lzdUVSTjZNU0JVOGRtMGdkVk02WkJ5OV9QM3ZRZmpWTE9wSGwtWXJjc2E5TTc2S2ZtNW5GMG9sTm1OM1NaeDZqeDJleGwxQmNCaE1EOWJhNGpzY3RPSy1fOXhNd09QeU5QN1BpVWRZSDJsd2dKdHlVUDl2ei15Um1GdDZvdGFnVVdfT3NlUTdLSC1sMzBva0V4SXpRczBmNFlKbld4aDEybDBmdHJWM3RSRE1jQS13eGk1SFF2VmFaZGZrWXJTMmFVU1ZCNjRJcldET0pMUEhnMHBWaWlkVmtPelRtN2h3OVQxMUZyVXZsSk9YaE5yVlZOT3FMWFE2dFUzYWhpck9kWEJkT1hteDJiNzZXbzhSNWdrU3NOR2otU0tERW0xZXc4X1pNV1RwSWhVWFlET0RQYzF6enJ4am5PQnV5MmN2QmtuTWZzVkkydkZ2V2pma2E1ZWhyNlRzbXZpWnhZaUJXY3QyaUl6d3ZLTmxMbThwM2RybFJfZURjWU5lZzNlNFlsaU5TX2RfblRDaHYySWsydGQyTVVhTXhnRURDSVdaS2ZNdnZlV19Jcy1GUEtpZVNhNWZBOFBkZ0RGaVEwdlpBUUh6bHpOZ3BnRmJleHFZdkVydnF6WTdEbEstSk1XTHVETE0xcjJMbUFqY0lMSTBKbGFDd0pUMXlCazJkMWs2RE1rdjkxclk5WXJPLVBnZEVmZWt4aFk4b2M0WWgzQV9hc3NLRk9TcmcxWmlONWVQMzBMckxTSXJBa2tWWEZTMU5RRThCcWRVV1RTMmc0LTJrZ0l6M05EZGowdUJ6VTBwb29DbElNZmdTdGlyMkpvVjVqZVBYTUNTQkR4OTRyc0JrcmFfRDhON1ZCUEI0b2w3T180WlZ5ZGNucGNDTHhnTXNOUEpab2phcF95b0l4VjZPUU1FOWlmSmpSZTkwOUF5T0hMUWtfa040SXNGQmZycm44RGNLRGxFSUJ3UFQtQTYtSHV2d0hmVldIeF9ZbXp4NGl0U041dm1vRk1ZMURKcXFnV0RoT2JnbUtaeW5MMnE0QkNsN0ZhZVNiOUZMd3J6dnQtLXFZbWFMcndaUzVubV9wb2pQYVAtRVphWVlGclRKWDRKNTFmWHVsMkVsSDI3TC1sQTR4aEJfQlNUWjNXWjlYX3VrcVJ1Qkl1cVdqbUxJMUMyYUU1WnBYQ3dmVUZsd1R3ME9sY3JGWHhDR1hzM3RQSkRHSi1HdS0yYTFINDNFRnRmQjJBbGZBcXJVMTI3NF96MEZNVE5QS01VTGJOLThBXzh4anpjZ2NaVXF4LVMwNkRndldoaWpqVlduck1vamp6cEQxWTJXTWlpZEc3aWFMUXhNUXdWWGlYLThTVGRHT09ZUGdKQ3B5WndTU0h4UDhHSVZWcDhEZVo1bmlwSFIxYmZkMjNsTFFKVkdQM29hb05jMXNfeGJRZ0hvRVRIa3JjbHFUVW9RNzF6MmlBT3l0YTQ4cmZ5TnBmaVVuMXJSMGVxRG9qS3piNU1JWTRIelJ0eWthUjVEWlQ3dDNVTnJ2TXR4V2tXVVhFaDJUOHFwdHk0WjJCM25ESUxmaWN3UE03dkEwNlZSVGpkaGo5RFhrRDlRNkdiSDN1bzhGUGlZc19ab3U3WksyN2hyRFZoT0ZHcl9ONWxJU0hiQ2h1RC0yMlpFdGNzT0JieXdxMkJNb08zMDktMU81WnhZdEphMDdDTi1nS2V4Sm05U1Z3MHJrOS0zRV9Tbm91SDVmcnN1RTEzbkxnTjVidThTd0oydkQ5Tmc0ZjJYTWZwSDFLZzVDZm9lNkI5MmZpRmpudkpOcG05WnZLUmFpTjk3alhoTEY5UmVLMlduYURJS3pZX1dfZFJoWnB6MEYxdEkyVkgzb2x1RnJ3OUpaQ25BbzNmWWV0b0tyWmVEdThGTE1hSUNwbkdURTUtM0xwdUdCX01ONDBmWV9oM0NLYjdWd0lLTWRheHpSVWZJWEQ1WnFrbnVkU21qdGRDelIzS09jaFM0ZUFqV0tiVkZCekpwaEo0U2l6Snh2c0JTNGQ2VWxGbzM4aFliN2hFWlpsZjVXMzhIWkxOcTk3bkVCWU9Ea2F2Y0EwdFB5NW42Q01RT29MOEVBbWZXRy0ybDZlOWNJaFo5SkJUUzNkWldlcUtwSENSSzhtTnRUUHlDdzFTaERJZXFXVmhWSE12dk5mRWJjWFFobnlJc21abnpHVEZuZEtBenFRQmpYUXF2X2VLVk1IcHltVHd0T3F6ZlZQb2Q5WnB2NlBXZFZDMTJ1OXdFaXBoNEJGaW13WjhicVJ0OXVoOUJhcTlzVmxUWG5zQUoyYUpvSmJkUnFkdThrWXppWmtrSHI4M3F4ZmdXQVdJc3BhRjZvaHpCNk5wU2tLSUxaRU10WFIxZzNjYlNuM21DemJsZmZZdjZLN0xtOTZfZ1AzRVNyOUpuaENkMlpSdjA4c3FfRnktazNaQlBFVl9ONGpRNGV3dmN6OWVsOTdOWG1HdHNJdUoyTTlkeFlBdW9VZ2lMS05nU1hvaXUxZVBqQ29NSUtNYkxQNDQzSm9naDh4MVNSbC04NUpIc09YRjRoa19aLVpiMjhtX2dlR1liazdZbkxNYUQzMHlJQ3RUSE1XSFJpaGpGQmFfMHNoVlU1SEJWc3B3eF90V3gyekNqMFpKVmRHMEJFZ25zRks3eU1hRUhXX3lEbkVqQzRnMFFWam5weExtWExlU3JiaEFnSjd0RU80T1VTZnRFRGJXaFFxMWd0MTRpVURqSGdCaWFVbzZPOGZnc2plTXhOVmtNVVJxQ2VjWXdfcEFKMkxJeFVYY2Frd0RaTGVUaGxPQUlLMTBab2ZBQzVFTTRSTXNpWUdDWEFQLTR6djZUemVUUmpMRV9ONEZFdzBzb01NQlVCWkRfRlNudmxqS196NFZPN2VVZWxQRGQxaHdCNHNJV09DWmdBNHJTcTNyaXQ1QTlfenNEZHl1YjlSMGctQzhaQS1vY09oNmJqeDZpMmNUcTBHSzBzVlp1dlZ2RkQtNGNwU2hZOGdYSlU4c2VDNnVza3BlMGdLclRNQ3pkaV9LQXM3WHFjeU9WVEJ6dzdJY3BNRUtXU2M5clR6SGtFWl9NSnh2ZEpIR0pwTGZ6VDRoNldKdk54a3c1WWlILV9rMmpBdWQ2VW5nVFhRT3M3M0FLTl9XckRpa0ZXSzFUbFV4b0pwYjlVMmxxQkp1aGp3alBlVF9KbWEtc1piMFdxcGlDTDZ3cDFwUW5sZGtLMlNoUzROMzQzN216WTQ9) # <-- Put your encrypted keystore file here
                CM_KEYSTORE_PASSWORD: Encrypted(Z0FBQUFBQmdjanNzOGt3N0pWSF8zNWM1SUJiakJoWEd4Y3hzejkwaGxSaXNNVzVrclNabGFwYnBxcEZ4UEJaUXR3dDlabXd5bU5pd04zWEhQemlTeXk3dkRhb2lQTUN5QlE9PQ==) # <-- Put your encrypted keystore password here
                CM_KEY_ALIAS_PASSWORD: Encrypted(Z0FBQUFBQmdjanRTMm1WWFcySV94bjFDQnZGYlY5SnRLWFkteHE5UVdpWTZEUnFreG0zV3J3ejlLUi1saHZ5WF9FRU90VlZZbDBYUlhXRDNMdC1zYmx2Yy1DVjhnaHZJdGc9PQ==) # <-- Put your encrypted keystore alias password here
                CM_KEY_ALIAS_USERNAME: Encrypted(Z0FBQUFBQmdjanRrRDJZb1k1WjF4LUZ3V3Z6b0RYc0ZsRzdidzFDZFZWMHI1NVpOM3dFQURFbjVRN0ZXRUh5OFZjeXI5eTViMWlYQWdxMHdyME4xTnM5ZGNheFVsaXd5MHc9PQ==) # <-- Put your encrypted keystore alias username here
            node: latest
        triggering:
            events:
                - push
                - tag
                - pull_request
            branch_patterns:
                - pattern: develop
                  include: true
                  source: true
        scripts:
            - name: Install npm dependencies
              script: |
                npm install --legacy-peer-deps
            - name: Set Android SDK location
              script: |
                echo "sdk.dir=$HOME/programs/android-sdk-macosx" > "$FCI_BUILD_DIR/android/local.properties"
            - name: Set up keystore
              script: |
                    echo $CM_KEYSTORE | base64 --decode > /tmp/keystore.keystore
                    cat >> "$FCI_BUILD_DIR/android/key.properties" <<EOF
                    storePassword=$CM_KEYSTORE_PASSWORD
                    keyPassword=$CM_KEY_ALIAS_PASSWORD
                    keyAlias=$CM_KEY_ALIAS_USERNAME
                    storeFile=/tmp/keystore.keystore
                    EOF
            - name: Build Android release
              script: |
                # Set environment variable so it can be used to increment build number in android/app/build.gradle
                # Note that tracks can be specified when retrieving latest build number from Google Play, for example:
                # export NEW_BUILD_NUMBER=$(($(google-play get-latest-build-number --package-name "$PACKAGE_NAME" --tracks=internal) + 1))
                export NEW_BUILD_NUMBER=$(($(google-play get-latest-build-number --package-name "$PACKAGE_NAME") + 1))
                cd android && ./gradlew assembleRelease
        artifacts:
            - android/app/build/outputs/**/*.apk
        publishing:
            # See the following link for details about email publishing - https://docs.codemagic.io/publishing-yaml/distribution/#email
            email:
                recipients:
                    - user_1@example.com
                    - user_2@example.com
                notify:
                  success: true     # To not receive a notification when a build succeeds
                  failure: false    # To not receive a notification when a build fails
            slack:
              # See the following link about how to connect your Slack account - https://docs.codemagic.io/publishing-yaml/distribution/#slack
              channel: '#channel-name'
              notify_on_build_start: true   # To receive a notification when a build starts
              notify:
                success: true               # To not receive a notification when a build succeeds
                failure: false              # To not receive a notification when a build fails
    react-native-ios:
        name: React Native iOS
        max_build_duration: 120
        instance_type: mac_mini
        environment:
            vars:
                # Env vars for automatic iOS code signing
                # See the following link for more details - https://docs.codemagic.io/code-signing-yaml/signing-ios/
                XCODE_WORKSPACE: "TestedMeStaging.xcworkspace" # <-- Put the name of your Xcode workspace here
                XCODE_SCHEME: "TestedNewStaging" # <-- Put the name of your Xcode scheme here
                FCI_CERTIFICATE: Encrypted(Z0FBQUFBQmdjbUxlLUZ0S1cxbUo1MzhkNHBhTzRxNE1vN1dYak5DazhkenlJb3lSNmNQZnpLbmpYWnRJN0RUand4ZFRaTkEtUWczTEZIMEF5d00tOUlVZzdVU1g1VWtreGN3Z3NRRFM0a2psc2ZrVHE0NXhHMVhraVZDemU2a0JzR0JuQUZaaV9DcVY4RmlwdmptTnZMVG1tNGdvQ2lmXzJQSVJiZ004dFVTT04xLTdaekxsdFFnX3QzX0RYY3NSWU1fTDhVTEEtSkNaaHlQYUFqUjdHV0ViV0E2ZHBOVTR0czVPa3N3dVhJbnVXa3RJQkFHRmdyNVVWY1hJcjdvZjZkYWM4Zm5JUFpybnhYOW9yZEpaak9aNUF6TjRneDN3YzhYYUM1NXV4Wk13SWUyUW9Oc0NacjJzbDU0SWxKamhkcjZPT0lBTHNRblRaSkN1S212MW1BVkFETC1xY3YtT3MwUk1IVzZyMldLQkJwamd0TWdvNk54M19UcW9IODVzWlNBZ0Z2UG91a3lQanJHdHBpdFVoQVFlVUxqTTRYX2FrVy1uVDBNRWNQdUViREVCR3k3SjFlTXFvRFdFNHhjU3hHcURxUzA5dHBiVVdGbzI0d05lZEpsT29yVzVEekhFRUFOeEhack4xUmoyWW1jdzFDNzFVUEVBbXd3TUpMbldRYU4zQnNWQ0lvTXNVY2ZiWExBMTlRRC02OE9GdC1sVzR1X2Jnc1EzWkNraXU1RUJpb3VzQnpqS3NRWmFMZDlva1lxU3lzUFNsRmVjMFdFeG5UMFZBZUFTcFdBRjBVSHd4YS1uQldZcHhES0VjNmlqQXVSRmdnZFF1cW1MUEZDUjNoRXA3d0VUWDhqaUNkeFRVellxSWRPLS1qRHZKc0pXajVZSjJYWEZKVWN4Y3UwZ0hUOE5yQXhQT1gzSlk5SWNyMXRKcmJrNDctb2VKaWlYYzhzdmxZMHUxeXMzMlRhQUVoaTM0ejJ0Q2xGTUxaU1hNRnVGcDM1VUZfM3FOVEhMX3JOOWtydmhsUzJzbFQ5UHhhcGo5b3FBc3p6Z2g0MXNIUENZZnNCcERacWhCOGlOd1lJYTdvZlFiMHlxLWZvTXFxcTRac0NMNHJyY1JBcnduLUdYRGwwMVZETnBkeHUwQzVELTFpVER0ZzFrSUdQUW5feVpIN0x2MldwWTZqVDVpN0MxaWltMEJodU54eVlIcmQ5YVNnc0ZQT0c3QVpwV1BJeVR5VFNHM1ltNnBDSGRaR2ZBbjVfcmtsdmRuQ1J6YXlFNkt5MDJ0NFJ4NmpRdVQ2YVhBNEd0SXp5SXh4Zzg0QXNQdF80R3drSzJBZ1o4dzhZUkQ0dHBVOERpT2FsTXNwWFdoMENTNzBQbzRMeC1IUnhPZUxpWkpTLVFHdDZLck9razhuT0dITlBqZFZRMjZxZEFCS0VfemhuSy1QNVRHMUpiVWdWQ3lHT1J4SEx2TWlERUx3ZnN2NXYweXgxekJmR1Y1ZjM4eXpEb1VyX2JfUmRZUjVRMDU1ZXRSSDNPZDNxZ0ZTRk9BX2RYbEMtbzY3VUF0WHRpU0ZaSWJtMjJLRXBCOGZhckJ3SnN1Z1BRUWlkQ2xzMHFvSnRnZTNjTW1WUW5abTA5VVhKODByUW1LRXloSkZnVjQ3MWFDY3dLcHp2MTNzeUVPUURESkdMYUJzY3JKazRMeGVleE1Db20wYTBZaHNkTlZkS3VLSmxYMFZfQkdOVXh2UjlPcU13cUdEVzNPVFRNRUpmU0UwQnVZRTVlclV6ZHRWcFpTVEdSMHpBTzZ2YkJIR19nYUpINHZwdHdsUGs0RHY4aEE0TUpyWWlPbkZmWFlpSmpDbGhaYUQ4eWxyX2RMR2hFWHJxS0EwQzlDUGNZWHBiQUJaejNQNEVjMGJjc2l4bUp5TWRNellaRzhieWVrdXplbDdMeHRrdkl4by1zbUk1QVVabVE4TEd3OGp5WFRHT0lhVDBpLXJiS2lBQjZqWEJrTzl4WGVQNmZVWU82NUdqWnQwa29OVVM4Zk1LN2xpNHhsZjhZNTBCaGJDZkM2NDBGVGQ1Z2NIX1lyanRla0FmLVJWZVBQZEVValZyeTdOMVNfVGZMakF2LV9pbUZyYjJuNllrOGRmd3JwWTJJZnFUZ3hDMEF4MG9yejB1UGp4ZXpiY2xGZFRWVmlGNkdhVTRfWGI4RXF5cUNva2NXTTgwc2l2d2I0WVpVSzF1YV94ckdrSkd0NklwWGR1UzRQc1lUNzVMaWJtRFFvM1dxTk9fNkJvdHBvZjJjeUpGN1Nnb2x1T285Nk15ZlBhWjBMT3pDS2hRWV9PalRPU1NlZGI3eVptTGM1YVQyamVlMjVVeE84LWlyTVhKNjBwU0wtZDd2dFB0dWdXdS1EZnlqUFEzNFNxalprT2R2aVVZUDhXb0RjRDhyZ1UydC1NbnhieVZuY01kYXgwN05MNm5wWVgwSWNsdXRDeGNjRjRoU0IydXdkNlFidnRaTGpvT3BKZTZvcUhybkVIZm1Jb3UzMndRZ0JkV1NTNXhGNWotMkhvbUFpTzVoa1E1QWVWamNQbFp3c3lxa3ZKcmlsNlpqemZtdTdQbWNzMk85cFFjZW5HelhpdDRXTFJXWERiYlVTQmpwUjQ0dnB3NURhZlZCbGN5YWc0a1FyUHFMWmlpYVhtOGlpTVQ3b2V3cURYNnpZcEYweUduQktaT2JEMnZxN0czeFFPOUdJQ2VTdnZ6TF9lQTBwYXQyOXdaU0xEamlmcER0VkFlSVBHdEdwSWlWeTEzYXcwbVU0TzAxUTdZOFh2RUFIc1lpVU9xSlFIbU1saGlGa0Z1XzNSMDRGQkhUS3pYZndPdzh2eElJajNxdGlDbWFCMzFRRXhiTzhCWjczLXhFTFBGTTltV3JxYl9TSmw2ckV2Y2VyZG9GUlBnZy1La29xWHpkVXN5ZFFrVTBIZHVvUFlPUFM3V1A2WGFxNWtacDBOWEgzSkJPOWJ4LS1RUFZBT2FCUTVNaDVPNW5Cc0NpWVFHQWQzUFJsN0xxVVRhVzM4TVpiNm4wMzhLdkZIN1FCYkhGMDRwMjhkbC1IeVlLb0kyRVlFc0Z1cXU5TWc1NDRtb2VLUHhpYmI5eFpnOEh6dUR6bkVLN2p6dXJEQjFFQ1ZqZVVaaWp1RWZtVk94U3F4dmZ4QjU4SWFnQWc5MzJ1cmtjWlRic1pyekYybXR0Rm1qdU05cExHX0FTQ3dXbWE2ZkdGVVlCVEVjRi1MN3V5QWRyY2lnclcwZ1Jya3VTaTJRTUhoZU1hTlcyTmlHZ1pRMVhqdXFpdW1aVnhHcHdVSjYzN3A2VGZXMWpPRnFPZnhvWVd4cE5FOURaNEwzNE03Z1pMaVBfTDNLV3lNTEZwRkdLVlRvN0QwNlVPNHlhLTFHbjhsV0NfbWhyMjFmLWEtR3NxMl9WUzhnOEJPNkhnX09veU9PUWlLRG9yOTFGQzAxNThpU05OM0RKVGkxQUhUNjJXZHR6RVdpLV9SM3VWSGJxSmVHRHUxbktaOEdpODlPQzV5eVF3MHV2elpONmdCSFlnOFptSjE1cC1DMU5qRWZpQnpJQ1o1QzQyRTBCTU5yTWFqQ0xReENFdm5tRUVLamJsY0VnQUE3eklTOFJFaUdySHBzTVRha3VUczcybG9US1ZQNFA0UVhQTld0UmFuXzFsZnJoaXlOMHo1eUdYc0gyQVJxUTUtVzNxb3Y5ME9td3ZWUXVYY3JMZ2x2UFNROHgwMkkzN25LN2tiMmxDS0J6RldlVjZVZE91ZVR1dFJPWWV4MEVCRk0yR2J0T2Z0SEVxWEF0OHZPNXI0c3Bxd05nN3lLaE41Qk4wd2FzX0tCZktOYTl6V3B4UEpRVnhhQ0ExMFBBUG9WMHJGVGFEX3BzRkp3X28xbWdMS3NFYzBHZkxVMjBoZko5ZnItNVRWQ0twNnZOa01nNnRIRFVKMXA5ZDZEU0x5LXd4bzhHQ25TM2RYOXNXN0Jfc2ZRQVRaRWlybGtPa0FDeFpYY1B1UDE1bTlPSTRqNzRKWXBZRW9QMVlPTk1yam5ySXJmdGpQZ0M3dE5GdWdMdG9QY3ZKaDZURlh1bEstcHJhS0d2TTI4WVdFUFNQZ0tCZlRucE5wRWxyLUZwcUN0LW5qOWNpRnpSeTB4R1UzLTJCSmo0Y2VfTndvQXI3QzdNem5JS25SckVPeWxGMURPbm9xemhaR1pJNDZxMUVYWkJKOFBhTUxoY1VJZWFtTkhRSHRnUlc3S3pJRFN5V2VjTnBaNURZckhNeTdkXzdYdEJWamQwRjNwVHJpTG52aFNHUHRXNnBUTjV3YjVtWnFMOTZaYTkzM1N4Tkdqcl91UWhWem5TREhmdXBNd2ktWWVCMmJ2Q0xTdUxUNmdNQ3JUNWwtTkVXRjZVaHJLbzYxYUV0VTlYa0syal9MQTkwQ1VCLXZZMkZiMVVtb3ZwSWV5RjBkTFdzQVAxelBYSGpyejhKQm9jZXNhalFsYzJhOWRKWnpZa3hReXVDX0p2X2NuQlVPODVrRFRvLTZkMi1IdVJxRnZDTktiOWRXdzR1ZW9tVEM1RDhNVC02T1lPNGNmbWxvZGg3STBreGRhZmNNQTNKR1lQVUlFaFlwUEkxMlEtRTItajZRUnlscnpkNEVSZk5IVlJ0NlAwSWRBRnFONUI5ZFdST3JaXzY5YU9ibkJqd0dSU2JVY2VRRDE0bnVHMXp1TkhuS0pFVFF6OGRNTlhIWFZjbzEtOVlrd0FQRWx1VXVvRE1keGU1QmVXS0FJbVZyajhYOWNBS2x5LXUwZ1YyYUhzVEVPaUY3OHZ0UTR5VDVmSFVGWi1GQ1U2NENWREhFSFlqVk94Y0xnVWRmYmR3UWdnVXpMeTFxQlVBR00xazBuNTh0aGQzTDlzZVdpUjc5LTdCalBmZU9sREs5dTBQV0FUVnJFbUxVRGhxNlBQUXRjSVV3bzQxZFE5bEo5MUcxRE9wbHprNEpySVEteGEwaklwRy1rMjRaazl6SDBqeHhSM191ekg0SGhHUEFnaUhNd0luVHZ0YzFFc3V2dEFNY3ZCOWFPZl8xbHVXMDBkd3czNmJ5blYxd0VCQmYyWDhEcGZmOWg0blNMdGp0Um1fWVpxSUJYdXhLQnBJX01lUzQzVk1zQnhsVjV6aFJhVExqV0djYnc3VTVFNDIyUTlfenhKekhBb1YyckwzdHNRVEtSMW5GTVl2UUZVV3d1N1h0N1doV1ZXUGFaM2dBbldVd3V6WUE3MDNJUThsbFpxTWt4M25TN19UdVdlUnVaeUs2d0Izbk1Id1lTV0VtSHIzNGUzWEJZZ1R2MFNycndrejh6TlJjaFFQRFBvZENFZUo0X3VYeWM0ZjNUY2J1a2FpYzZPNm9HOUFRa3hGSXVUUWFKMlFvaWhpR2RZWUZCMTFxbGlzaEd1aTBVMmVkR0RMT0hBQWxudXljZ2JFaGJTM1hPdUxkT2Y3TTl2cm5Tem5KQTFrVFltei1IdWJvNmJoQ2JnN1BnVWlBX1psMThycVcxUUV5ZHJnQmoxY2xOalpuTlZOYWtWSXpFbmpkZEtjZVVFcm0tX2RtSVJ0ZDFIcGxIdnY4RGJhcDB0ZmdnQ1BxTS1SODBMRUNLU2F0d1RfanpYM3V6WHZOMmp3MTItc3VTSzZsX0t2cGhjdHhpd1hVSmMzTnl5QkVoNmtrMml0LVVyMHRVUmM1T1FtZEJreXVTb1o2cUZiZktURnJGSXZVY1ZMLUN0VEdtdWVramtXZWd6Y1dIZFlGQ3otNTFJTWJOdzhQVEo5aUlXZi1wNWtSdURHZHFqamJoWGlfSnNTZFVWbE92M0JabGhtV0oxZm00aTZERURQT3FoNW1zb3lfZUhQZXZ6MFEwSzNPdGV0UjRnUHlzUjhPX2h6M1ZNWEtrVFBqZ3hqbnZRVHBDTDVuaXIxYVc0OUc4cVhvNjhSdHRDRWhYLXdrZllLTmwxTW1MT2RzY3pHLXZNUEdXOXh5V0dzTFQ5TTlPNlc1OXNIQTZjdVc5LWZZdS03Ni1jbnAzU1lBRmZqNExfNEtKSmlhU2JBTFFEazVQX2czclhuUFdiVEYyWlVQSy1qSnNxZTVXd1drMXpuMld0M29KTmIzRUxZSWRWa0JPa3B1YlhpeTQxOGFpRUprNm1XeFV6RjJsV2hERE1zMUFaMGZ5elpCM0ZLNXJiM2VodjBiQ1k5Z2NNbldBZGxfTnBwaGdxYWM5YW8zX3NuYWNGZ2JHbWM4b0c5ajRjZF92eEhON1VvSkFQU2ZKVFFXa1Fha3RuM3IyZ1pDNjRJd3h5Ym8wNmJCS1Bxc09RMmlnbFhEY3ZLZEF0eHhHNVFsdWdTNGl6ZWZ2UnBXNXZaa3JZbGlZUGRYVl9PN3pVWE8zSTNzdEotT01jR2hSdFZBUElXMURwSHFQZGFkdjVZSk1SVFg1UmlGNF82TW9Ga1Z2UDh5MHh4bXRoUW16UzkyX0R2V21tekVmbW5jc2NxVnIxS2V1S3REY0wtQ0VDd0wxSjRiY0VLdUlKaEwxSThPTWEzaXI2R1pwQ3NRVVpWeG5Kb0lTajdsd0FQd3NjcUs2bXRkTmJiRUk2WVl5OFJmNV9UNjg3djVlVGI2UGRpZVhTRDBoX1ZCLTFGek1sQmtnTFRnYmxzVG9kbHlTWE9OUlFrb0FHSzdZdGl1S0xKRHVycG9mTXFBMDZKYVJtZXdudXA1WVR3NWVnYUp0YmNnbk9xYTNIRWsyTXZ1VWtCc2Y2bUFTX3VPUGlRLW5PU3BMd1ZzanhYa0RycjZEc2d5SzAyWnktTjlGaXQ3MW9TWWxyOUN6NkhaUjF1OXF1TXdwZi0wLTNyc3d4MUUwR3Z2V1c3clI2T3ZPM090NzJicGltYnI0ZTlOOXlZNU9tQkVnMVJCZU15eFNMcS0wSl9SUGtWMy16bEMyS0RuaG5IOG1nblZRbXZVcUNjNi12TE1XSnlWQnNmU1MxdzRqekRIeTc1aWN5cFJBemdRbTgwelpOVFNXRlA4UU1JYUlIekUzWGtadl84UXI3X2FhUzgycXdNUkRObGF6Q0ZtUEkxMEdCWkRhcTNjVjVldnVtQzl5ZEQ3c2VrR2htOENLbjN1eVdaWVc4WU1TZlk1WGVxdllBaF9rSmotTkp6eGRMSmlOenVXRElsVHpqbGhweVh5NnFvMEp6eEVwT2p3ak9hMlUtMER2NkNWQ2FBZkNXczBEX3dNNW91T3JOcWR0YmhVbDZwemhDTGdudGNWeUdiSUZTRU02UUlGYVA4Q0FXX2JaanlDc0N4U1BySm8yVm1xbFM0WDgwMnhxYTJtQ0RFLWNxSDNxbmZsbk1LWWxxR05pdC03aFk2a0ZlQXNGWllYWlpwS1ZBbGhGN3I4X0dpZTZaUU1kZEVBQng0dHRsUU1BVDRSZXFmWHJqMHRGSFZCeTdaOEJta0JRZmRUZ0VsNFlSUnhGaVJTUktZV1RJUnd0VDNEeGI3dC1Zcld6NVRYYktpQUxMamx0NTZsNlJocmktbHh2OW0xUEFXZW5YMElZR2xGZWNJNzVsdllQSE1qc2RZTmtpUkJlYUlqZmg3UTRaOUFDd2I3cjNRamdXVWxLdzItWHJ0a1VDRWhwQkQtUzZZQjA5bzBhRUdxelVMSEdVckFPYVhESk0zLXR6cDJkVzJ2SXMxQXc0eERZdVlXVUg1UlEzcFZkbF9PT0F6dz09)
                FCI_PROVISIONING_PROFILE: Encrypted()
                D_SSH_KEY: Encrypted()
            node: latest
            xcode: latest
            cocoapods: default
        triggering:
            events:
                - push
                - tag
                - pull_request
            branch_patterns:
                - pattern: develop
                  include: true
                  source: true
        scripts:
            - name: Install npm dependencies
              script: |
                yarn
            - name: Install CocoaPods dependencies
              script: |
                cd ios && pod install
            - name: Set up keychain to be used for codesigning using Codemagic CLI 'keychain' command
              script: |
                keychain initialize
            - name: Set up Provisioning profiles from environment variables
              script: |
                    PROFILES_HOME="$HOME/Library/MobileDevice/Provisioning Profiles"
                      mkdir -p "$PROFILES_HOME"
                      PROFILE_PATH="$(mktemp "$PROFILES_HOME"/$(uuidgen).mobileprovision)"
                      echo ${FCI_PROVISIONING_PROFILE} | base64 --decode > "$PROFILE_PATH"
                      echo "Saved provisioning profile $PROFILE_PATH"
            - name: Set up signing certificate
              script: |
               echo $FCI_CERTIFICATE | base64 --decode > /tmp/certificate.p12
                  if [ -z ${FCI_CERTIFICATE_PASSWORD+x} ]; then
                    # when using a certificate that is not password-protected
                    keychain add-certificates --certificate /tmp/certificate.p12
                  else
                    # when using a password-protected certificate
                    keychain add-certificates --certificate /tmp/certificate.p12 --certificate-password $FCI_CERTIFICATE_PASSWORD
                  fi
            - name: Set up code signing settings on Xcode project
              script: |
                xcode-project use-profiles
            - name: Build ipa for distribution
              script: |
                xcode-project build-ipa --workspace "$FCI_BUILD_DIR/ios/$XCODE_WORKSPACE" --scheme "$XCODE_SCHEME"
        artifacts:
            - build/ios/ipa/*.ipa
            - /tmp/xcodebuild_logs/*.log
            - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.app
            - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
        publishing:
          # See the following link for details about email publishing - https://docs.codemagic.io/publishing-yaml/distribution/#email
          email:
            recipients:
              - user_1@example.com
              - user_2@example.com
            notify:
              success: true     # To not receive a notification when a build succeeds
              failure: false    # To not receive a notification when a build fails