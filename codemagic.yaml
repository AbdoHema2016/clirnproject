# Check out https://docs.codemagic.io/yaml/building-a-react-native-app/ for more information
# Please review and update values

workflows:
    react-native-android:
        name: React Native Android
        max_build_duration: 120
        instance_type: mac_mini
        environment:
            vars:
#                GCLOUD_SERVICE_ACCOUNT_CREDENTIALS: Encrypted(...) # <-- Put encrypted CONTENTS of your Gloud crendentials file here
                PACKAGE_NAME: "com.rn.clirnproject.staging" # <-- Put your package name here e.g. com.domain.myapp
                CM_KEYSTORE: Encrypted(Z0FBQUFBQmdjanFJNXFBN2VwajBELThBZ3RwSnhrR1RpeUVxZFB5T2kxdm1GWU13aVZsTWFlS2ZfcGdqM2NBNXMwcGZMekVOR3l1a056c29fMW5hWVB3eDkxTGJuWEstS0dQdHJvMlg4Q0lfQVl3Zjl1cnpCdER2ejFDV0prLU5aYS1SYVZzZ3BMQngyRC05MnZNZ205ZXlnQ2dhWGU1OG4xaWR2bFl6TnlWd0ZFODFPVU9LdTdVeC16WlIxcVJtNVgyOURMZWZIQlU4cFdPSTJ0Y1NJbFl6Y1lJRlZOcHBoVjVHVUFwa0dvYXJ4MUg0ckpQS3RIdVBMWXVoMy1tS0NiclhfT2twOG9QQ3REcy1TT3BwSnlCandLSWQ0UWhnQm1kdEU3cFYzMjdYbWo3R0ZPbFlYLXZFNEdDX0RKQnJhSnZTZG1fd2FUWHZxLTluWGdneDd1RWVHVHJDcHpQMXJ0Zlo5Y2FRN0daUnFYVE05UjFTU2xkdW1rUmtYaFFyT1hRUGNQZjVPNDRkLW1CU1BoZWJ2ZFhCdmdraG5WZjAyeDRYcFA4NlRRVWxXNHZ6aW1WQVN3czFwWGVZcHVoR095a1cxeVVqNGVZR3pYU3cxakVNX2ROLTRNTW5MQkJWRXdxVXNXOG85WDlMcFNRbUptakJPTFFXNGZiNy0xbG96MFJhQUFZX1k5NHhEcVRRRTQ2Skp6VmVaNXU4dkt3UGZJT2gwdnhoMk00ZW5TM1lKSmUybl9tQ09vMGdoN0o0RVZGQVY0VjBlcXUtWHE4WEdxcGNfNktoaFBJSkhsUG13NzhTZ3p5cG91SXhoVU83VDFVTFh3UFFQWG1LM2g5YVFRZlpOMHhzcXVNdTBnM2taUEtBSlFqNGxYZmFHbDZGR1JZeTlUcnd1UmxON05ibnJTdFdYLVp5WTg4SzBCaUdwZ1JXUWpzYmZQaHliRTMyZUtVcGp1MFc2VWpsRXB2TjZnOEE3b3A2LWI4c052V0JOS1d6R2xmUDNWQnZOR0ZYb2NnU014VWgtT0l6bHVPbmhhQ2p1dmRmV0pXRHBFOVR2M292ODA2d081amVCd3Y2cC1Ca3ZlOUo3RVFvZ3dmbkNQamVwRFBBbFpBVFNBejE0dTd2bkZONmZEcWF4d29CdnZPbnNVbm8yZkJNOGtJbUpTMnVRTUwyMTBpeXlIcHRtaWQ1YVRMRndxZmdzRlB0UHo5WG93OUZUdGJhTGFRNjYwNWpLLWdiUkw0MnQ1cEQyNU9UWnpOb0tMOGdIZGtIUmhRMkprMkU4UUZibGdHX0tlQ1JaUWNFR0tsVW1IMnpLTnhYVFlDNlExcUdfMEhZRVRweWRNUnFXbTYwTk1IVmEyc1U4RXhWd1FXQ3BVeFFndVpBSlZhcS1iTGpqN2lTMGhLaDJQZm9KNTBsYUViaFBiajhNczJDanRJR2tfRkJPWERNbmZOb2o2YXU5MWR1MHQ2OFYzeDNUQjNjWUYwQ2xKMVBIYU0wcmlSSHFHZ2R0U0xyOWxUM3dRbFd5SmV6aVJOOEVROWVBckRCcTlZZi1lTWFIaHpQTVQ4cGlvaDRkSDRsb0NxTFh0TjR6bDdjenZCbGt2TmJqNGZoX3ZBUkhBWmc0c2VERmpJLXh0c25wV1lmNWNPN1g1NmR0Vm44bnQwbTJzRzBfUjVDVTFLd1U5Qm42enZ2Wk9IVlhfelpVS0JHMzZsUlRWdmJ4Z0VkcFhJWlNUU3JVaTRta210M3lzdUVSTjZNU0JVOGRtMGdkVk02WkJ5OV9QM3ZRZmpWTE9wSGwtWXJjc2E5TTc2S2ZtNW5GMG9sTm1OM1NaeDZqeDJleGwxQmNCaE1EOWJhNGpzY3RPSy1fOXhNd09QeU5QN1BpVWRZSDJsd2dKdHlVUDl2ei15Um1GdDZvdGFnVVdfT3NlUTdLSC1sMzBva0V4SXpRczBmNFlKbld4aDEybDBmdHJWM3RSRE1jQS13eGk1SFF2VmFaZGZrWXJTMmFVU1ZCNjRJcldET0pMUEhnMHBWaWlkVmtPelRtN2h3OVQxMUZyVXZsSk9YaE5yVlZOT3FMWFE2dFUzYWhpck9kWEJkT1hteDJiNzZXbzhSNWdrU3NOR2otU0tERW0xZXc4X1pNV1RwSWhVWFlET0RQYzF6enJ4am5PQnV5MmN2QmtuTWZzVkkydkZ2V2pma2E1ZWhyNlRzbXZpWnhZaUJXY3QyaUl6d3ZLTmxMbThwM2RybFJfZURjWU5lZzNlNFlsaU5TX2RfblRDaHYySWsydGQyTVVhTXhnRURDSVdaS2ZNdnZlV19Jcy1GUEtpZVNhNWZBOFBkZ0RGaVEwdlpBUUh6bHpOZ3BnRmJleHFZdkVydnF6WTdEbEstSk1XTHVETE0xcjJMbUFqY0lMSTBKbGFDd0pUMXlCazJkMWs2RE1rdjkxclk5WXJPLVBnZEVmZWt4aFk4b2M0WWgzQV9hc3NLRk9TcmcxWmlONWVQMzBMckxTSXJBa2tWWEZTMU5RRThCcWRVV1RTMmc0LTJrZ0l6M05EZGowdUJ6VTBwb29DbElNZmdTdGlyMkpvVjVqZVBYTUNTQkR4OTRyc0JrcmFfRDhON1ZCUEI0b2w3T180WlZ5ZGNucGNDTHhnTXNOUEpab2phcF95b0l4VjZPUU1FOWlmSmpSZTkwOUF5T0hMUWtfa040SXNGQmZycm44RGNLRGxFSUJ3UFQtQTYtSHV2d0hmVldIeF9ZbXp4NGl0U041dm1vRk1ZMURKcXFnV0RoT2JnbUtaeW5MMnE0QkNsN0ZhZVNiOUZMd3J6dnQtLXFZbWFMcndaUzVubV9wb2pQYVAtRVphWVlGclRKWDRKNTFmWHVsMkVsSDI3TC1sQTR4aEJfQlNUWjNXWjlYX3VrcVJ1Qkl1cVdqbUxJMUMyYUU1WnBYQ3dmVUZsd1R3ME9sY3JGWHhDR1hzM3RQSkRHSi1HdS0yYTFINDNFRnRmQjJBbGZBcXJVMTI3NF96MEZNVE5QS01VTGJOLThBXzh4anpjZ2NaVXF4LVMwNkRndldoaWpqVlduck1vamp6cEQxWTJXTWlpZEc3aWFMUXhNUXdWWGlYLThTVGRHT09ZUGdKQ3B5WndTU0h4UDhHSVZWcDhEZVo1bmlwSFIxYmZkMjNsTFFKVkdQM29hb05jMXNfeGJRZ0hvRVRIa3JjbHFUVW9RNzF6MmlBT3l0YTQ4cmZ5TnBmaVVuMXJSMGVxRG9qS3piNU1JWTRIelJ0eWthUjVEWlQ3dDNVTnJ2TXR4V2tXVVhFaDJUOHFwdHk0WjJCM25ESUxmaWN3UE03dkEwNlZSVGpkaGo5RFhrRDlRNkdiSDN1bzhGUGlZc19ab3U3WksyN2hyRFZoT0ZHcl9ONWxJU0hiQ2h1RC0yMlpFdGNzT0JieXdxMkJNb08zMDktMU81WnhZdEphMDdDTi1nS2V4Sm05U1Z3MHJrOS0zRV9Tbm91SDVmcnN1RTEzbkxnTjVidThTd0oydkQ5Tmc0ZjJYTWZwSDFLZzVDZm9lNkI5MmZpRmpudkpOcG05WnZLUmFpTjk3alhoTEY5UmVLMlduYURJS3pZX1dfZFJoWnB6MEYxdEkyVkgzb2x1RnJ3OUpaQ25BbzNmWWV0b0tyWmVEdThGTE1hSUNwbkdURTUtM0xwdUdCX01ONDBmWV9oM0NLYjdWd0lLTWRheHpSVWZJWEQ1WnFrbnVkU21qdGRDelIzS09jaFM0ZUFqV0tiVkZCekpwaEo0U2l6Snh2c0JTNGQ2VWxGbzM4aFliN2hFWlpsZjVXMzhIWkxOcTk3bkVCWU9Ea2F2Y0EwdFB5NW42Q01RT29MOEVBbWZXRy0ybDZlOWNJaFo5SkJUUzNkWldlcUtwSENSSzhtTnRUUHlDdzFTaERJZXFXVmhWSE12dk5mRWJjWFFobnlJc21abnpHVEZuZEtBenFRQmpYUXF2X2VLVk1IcHltVHd0T3F6ZlZQb2Q5WnB2NlBXZFZDMTJ1OXdFaXBoNEJGaW13WjhicVJ0OXVoOUJhcTlzVmxUWG5zQUoyYUpvSmJkUnFkdThrWXppWmtrSHI4M3F4ZmdXQVdJc3BhRjZvaHpCNk5wU2tLSUxaRU10WFIxZzNjYlNuM21DemJsZmZZdjZLN0xtOTZfZ1AzRVNyOUpuaENkMlpSdjA4c3FfRnktazNaQlBFVl9ONGpRNGV3dmN6OWVsOTdOWG1HdHNJdUoyTTlkeFlBdW9VZ2lMS05nU1hvaXUxZVBqQ29NSUtNYkxQNDQzSm9naDh4MVNSbC04NUpIc09YRjRoa19aLVpiMjhtX2dlR1liazdZbkxNYUQzMHlJQ3RUSE1XSFJpaGpGQmFfMHNoVlU1SEJWc3B3eF90V3gyekNqMFpKVmRHMEJFZ25zRks3eU1hRUhXX3lEbkVqQzRnMFFWam5weExtWExlU3JiaEFnSjd0RU80T1VTZnRFRGJXaFFxMWd0MTRpVURqSGdCaWFVbzZPOGZnc2plTXhOVmtNVVJxQ2VjWXdfcEFKMkxJeFVYY2Frd0RaTGVUaGxPQUlLMTBab2ZBQzVFTTRSTXNpWUdDWEFQLTR6djZUemVUUmpMRV9ONEZFdzBzb01NQlVCWkRfRlNudmxqS196NFZPN2VVZWxQRGQxaHdCNHNJV09DWmdBNHJTcTNyaXQ1QTlfenNEZHl1YjlSMGctQzhaQS1vY09oNmJqeDZpMmNUcTBHSzBzVlp1dlZ2RkQtNGNwU2hZOGdYSlU4c2VDNnVza3BlMGdLclRNQ3pkaV9LQXM3WHFjeU9WVEJ6dzdJY3BNRUtXU2M5clR6SGtFWl9NSnh2ZEpIR0pwTGZ6VDRoNldKdk54a3c1WWlILV9rMmpBdWQ2VW5nVFhRT3M3M0FLTl9XckRpa0ZXSzFUbFV4b0pwYjlVMmxxQkp1aGp3alBlVF9KbWEtc1piMFdxcGlDTDZ3cDFwUW5sZGtLMlNoUzROMzQzN216WTQ9) # <-- Put your encrypted keystore file here
                CM_KEYSTORE_PASSWORD: Encrypted(Z0FBQUFBQmdjanNzOGt3N0pWSF8zNWM1SUJiakJoWEd4Y3hzejkwaGxSaXNNVzVrclNabGFwYnBxcEZ4UEJaUXR3dDlabXd5bU5pd04zWEhQemlTeXk3dkRhb2lQTUN5QlE9PQ==) # <-- Put your encrypted keystore password here
                CM_KEY_ALIAS_PASSWORD: Encrypted(Z0FBQUFBQmdjanRTMm1WWFcySV94bjFDQnZGYlY5SnRLWFkteHE5UVdpWTZEUnFreG0zV3J3ejlLUi1saHZ5WF9FRU90VlZZbDBYUlhXRDNMdC1zYmx2Yy1DVjhnaHZJdGc9PQ==) # <-- Put your encrypted keystore alias password here
                CM_KEY_ALIAS_USERNAME: Encrypted(Z0FBQUFBQmdjanRrRDJZb1k1WjF4LUZ3V3Z6b0RYc0ZsRzdidzFDZFZWMHI1NVpOM3dFQURFbjVRN0ZXRUh5OFZjeXI5eTViMWlYQWdxMHdyME4xTnM5ZGNheFVsaXd5MHc9PQ==) # <-- Put your encrypted keystore alias username here
            node: latest
        triggering:
            events:
                - push
                - tag
                - pull_request
            branch_patterns:
                - pattern: develop
                  include: true
                  source: true
        scripts:
            - name: Install npm dependencies
              script: |
                npm install --legacy-peer-deps
            - name: Set Android SDK location
              script: |
                echo "sdk.dir=$HOME/programs/android-sdk-macosx" > "$FCI_BUILD_DIR/android/local.properties"
            - name: Set up keystore
              script: |
                    echo $CM_KEYSTORE | base64 --decode > /tmp/keystore.keystore
                    cat >> "$FCI_BUILD_DIR/android/key.properties" <<EOF
                    storePassword=$CM_KEYSTORE_PASSWORD
                    keyPassword=$CM_KEY_ALIAS_PASSWORD
                    keyAlias=$CM_KEY_ALIAS_USERNAME
                    storeFile=/tmp/keystore.keystore
                    EOF
            - name: Build Android release
              script: |
                # Set environment variable so it can be used to increment build number in android/app/build.gradle
                # Note that tracks can be specified when retrieving latest build number from Google Play, for example:
                # export NEW_BUILD_NUMBER=$(($(google-play get-latest-build-number --package-name "$PACKAGE_NAME" --tracks=internal) + 1))
                export NEW_BUILD_NUMBER=$(($(google-play get-latest-build-number --package-name "$PACKAGE_NAME") + 1))
                cd android && ./gradlew assembleRelease
        artifacts:
            - android/app/build/outputs/**/*.apk
        publishing:
            # See the following link for details about email publishing - https://docs.codemagic.io/publishing-yaml/distribution/#email
            email:
                recipients:
                    - user_1@example.com
                    - user_2@example.com
                notify:
                  success: true     # To not receive a notification when a build succeeds
                  failure: false    # To not receive a notification when a build fails
            slack:
              # See the following link about how to connect your Slack account - https://docs.codemagic.io/publishing-yaml/distribution/#slack
              channel: '#channel-name'
              notify_on_build_start: true   # To receive a notification when a build starts
              notify:
                success: true               # To not receive a notification when a build succeeds
                failure: false              # To not receive a notification when a build fails
    react-native-ios:
        name: React Native iOS
        max_build_duration: 120
        instance_type: mac_mini
        environment:
            vars:
                # Env vars for automatic iOS code signing
                # See the following link for more details - https://docs.codemagic.io/code-signing-yaml/signing-ios/
                XCODE_WORKSPACE: "innovator.xcworkspace" # <-- Put the name of your Xcode workspace here
                XCODE_SCHEME: "innovator_Staging" # <-- Put the name of your Xcode scheme here
                FCI_CERTIFICATE: Encrypted(Z0FBQUFBQmdjbzVQVGdaOGdFeDV3ZmVSSExwZlRGTGNYQjlDak5PRWNmeDVpclJHc1ZUbmI5clVUMlRZMUsxcGltcTJCbzN3TmdwX2ZMWEhOV1daejZ4TDhQLUw3bEJhOTJmTnZncGU3YjlValVKWVpOQTRBSmV4QUpXMU02Z0pObjR1UlRqRTEwTUl1cHNBcC1fQUw4RUQxS1dRaFNsUFN6MGtPaDhmT2I1dGRzd21vNW9DQVlGeG4wVDJUS3d0bVNXZWcwWVZ2bHU3dWpscEw4WGQ0OGlzVUNveTZpNVVZZHk0Q3JBNXVMZVp3YjduYTBJd1pUbGNHY2VhRGRyU0JpNlN3ZDRLek1Takstb3pXZXVuUEs1Q1BZVjdhTlVCSXFtMVNFekpHeU9ySEVMRlBSR2piZVBIc2Fyd0UwSG5fY29zMURPNnlFMkVScTlMQXlLSjhESGNHbzd0Ylo1MkN2Rk5lMGdyMzM2eHlYTWNlaUtFT3NwU2xQamtlckstMUJDVTZwOTRrWTlBNG4yVzFEMHgzaE16RVM2eWtxaEVLQjVuX0ZqZTR1Sk8wamFrbGxSQ1ZXZ0hkaXNWLTc2aWg5VmFZS2ItMWRFcThtU0xXdHB5dl9qYkY3V3JtMU9rZFBYZkd1WnFGcXF4S1Y4bE9RUnRsalI2cWdob0ZheVN4ck1waGNrcm9FZDJDd0tTZ3RJckd2R3YtX090NkNVTWhPeWZMZm1nN0dHc3BBc0R2aHQ3ZXJlNm9iMFFFZjItNUw2Z3Y4SDZpNXdYazlNVmJRSTdLSjhYRkh3RDAyRkdRRUZPbHgxTXFLaVRaLWIyaWpkYnJDZnprZEE0RHA0OVAwRmJmbU12emllQUhmTGtmYTFnaXhlQlFmZ0M3Q21yVUdPLXViU0NjVEVjQWdXWmlNeC1EbVFQaS1Sc0RnUU5FMjQ5dmdXcUdqNXBVWWJGa2hCTU9KeFZYaVhhWkJ2QXJjeUJ3Vy1IOGxTcEQ5M0ZYaklyTHRzcUxvR1JfLUFHNkZQdTBTdFF2czdLTHE5WV8tb19nMzhKWFlCNFh0aUIwRmppRjRCMFBqZUhnU1J5ZTZ3eUk2UUVMeVpKeDJwZHl5ZFBKd1RkbzFyc2J4MGdpWi1RbC00M2hxcVFJV1lNLTFtU3dMVTltc284bGNmQkNnV1JoTGpUVGNieS0yMWwxQVN0M1FCTnFaQjFNaWxyTThNdkRra0I1eTcyLXFvTFlUdjFMcTA2a0R1MVU5X2NzVTdvU0pIdWtSYWNKM19LVUlsSi1IbDFDNDUtVTMweWFfX18wclpTUkJtaGFnOTRGWlJBZUd4bHpXNVRFczBPQmcyRzZlV3BrQ1kyYW9QT0pacjlybGJYRDl0bDg5eWtLTGdxRWVtaFcwTUpfVFFZemRWRFptSm9JTDV1alF5XzA4ZWJFUzNhZFlJRWppdjBBWmJHVWV1VHNpVGVCOTgtbFdiTjZDRVJHVFNoUGloTG1aVnRaMU9tNkdxd1UwTzF6UVF3YXIyQnBxSm1EcVRlQXNkaU05cGdMMHpSMW5DWGViemsydUNJclFHd2E2Mm5uamJvSWtKdl9PWkZIc25oV0ZMaDg2R2w4bTB0NzJoWVhoSkhyS3lHVldURks3djRmWURYTzdrQUJobWNReWs1TFhORTB1QmMweVZUeTd0ckhtMDh3RUUxVm8wRUdkUjdidXMzcXF6N2d1ekZRd3hBbWY5cTF4QkRpRHQzSHBJQXlOUTd0aFNyRzZWT096SE8tNjhRWVRxSFpKaHI0emVBQmlDckhzS0FySVljcWthWDF1VUpnVkYtVDhOcHByV2NiOHVSOHJPcjBrSi12dlYxdFBGUjZVanpEdW1mODhsUjlleDdSb05sS19GMXpVR2JVYzg2VFNyeklZakNXOXhycmJDNE02V0ZMLTRxcldkMHZqZUZzbC1WSm5HX0VibGJGdEZPUUUtclZ5RVFSb2ZBZHdzcHhzcWFPSGNBcFFhMElfRTlGOEdGdHRIZlphcGpsbVpyRlJ4bEM1QklFN180eHF3RkZtbjV6MG1oRnhFZTlfSk9LbFhWaF9xT1hZYzVaa3hWQmJKdi1xbkhfRER1VGtYbVlsNWhkTHlmQ1BBczJIQzdoREE3cEZQT1A4Qm1XQXhoYk5nS2wzT2tROVJ4MTQtVjUwOGwtREdqTXpveWFzWmpvUXFFOFY4b2pmOFc2WUFPSDNBYkxJazJVb3BqTEpwbjF6LWlZR0NXM3JpYlZBdm4wVTdfa1JGY0htbDdPQWo4eGtCLUxjUUdka3pVQm9EaWhiMnp6SFZ1a3NEM2Y1RjE0STNIZkNmVGJHdkJQWGx2cnNZRVh6ZDVWMUlNRVRjNGpjemw1TnFKU0dzRG9UYXJweGVxYy1OQV9oUEt2NGNoNGw0aFJBVmFkY0s1cXNiWGs5QmtaSENFVXlySGVhbG5QM2cxUU5YcDZBYWZFdGh5cHhpQ0tnb25MYUNWTDdkMGdxcjNaaGlzRFh4SkJzcU1ndFVYMlJWSkZzTlNnLWM1UWI0clE0UDhieGE3STJUQWIxa2FnSkJnSVdQVGVpcVpuTzJIMGVHOC1OUWgwTDYwQnVGNTdib0JMMldwQW10bGdjUGhLZkZjU0xXZkY5eFFqWmhNRkNsb0psUW11dWZmdTkwWjlfVUlMaHdXQ1lBWS1sbU4zS1o2Y0NrdmZpbEZDT21GUGU0TC11VGdpbENIZjV1d3BzMDhMQ3VXaWc3SXdHSUpHMmtKU29UNE5vSG9XanlsNUNvOWhObXE4MGZvU3hENHduVG9nMW9SVU1qYTk5RWtEU28zTHhESGlGaTd4VVJ6a1lUaV80cTNZUjB4MHZCTkZqZ193ejM4b2xzaDZFZVhmNHhkMUJsZU5oTG5GNW5IOExrM3hudEx4RzJqRTRHOUkxOTdKSWpGWVpxZzRCTUdSWUZ0SEpOSzY1Q2RGSm9WSFhZLWNTRmJWdUFvVjJuQnJ5Y1JHRDJmMVFEcGh4UElteTJINnBOTEpnbjNGMEtkMWw5b3YxSHB3aGdQQ2pkcFlnbi1oa01QY2lZZGpmQVMwcmlEZkF0SEsyWXM5dWxVUmpsb1loTFlxQUk0aEdlSWNaUXo2VTZ5SmdUbWlYX1k1eGtQWTMxVl9ndlZyQTk4MU1qRFEzX1lWQ1ZzWndNMGxEMUlaME8wV3lBZTdhVkVESUJqUUxEOVZpQmNaSkR1ckR4SU5GVkVTa211cWtrUGFmbEFOWVRVU3ROdW9hQmtzXzdOckFnSUItVGdCaUZ2QjlkZ0Z1SEZ3YTBYYk9OVENPa0RIWDVMOFNSdEdtYjVWMnk1SDNILWxtSGVqZEdZb09mZFhnUXhvRzVJNVFnaTVWdGNhWVlKZjNsRnNWMlM2a0xTdHFnREJNV2pIb1FVY2I3dURlX1JFVEd4YlBGSG5PLTE0Nl9DaVFZdE1LT0ZGWmZJSEFKWnd0N2F2QVZjYUg0U2dTV2IxQkxUZVdjR0VBeEFvdDV2QVVMNW9SVkc5WU9xLTdLN18tTFZ3ZlF3RWI2YUY5NEdRSGxDVWtwMjF2UVcxMTZ5QXh2SU5MRTZiTWItQjdaQ3JJNXppY2otSUphOEViWS1sZmhTNk9xUFotMmtzVjNGSjlhZHpiVzItY1NuSDI4eGNxU25Dcmxpcm1PY0FJRldmLVFOYTUzSG1PNDVxTEk0VVFGcEFQRDRpSDJTOUJ3MV80RFhHNDMwdmlVZFNoVkZGNGFyUHdpYjhETFBTRmVFakJQd0dqYkpsQ2NmTmZOdGZTcnJuem1aUHlMYlpaMFRLRGZxZFowd2d0T05xTFBfLWxCVmNKOU44NGtHaGs5cjN1UFh6clptMzFUTFR1ZzhIQ2xFUlIwQ1gtMXdhdDJmQjc1VFNYRVJxUkNWMnVoNkFqLVZ2ZUZqYjJGLU8xUHpGeldKUlNjT3dfVUg1eF8wVDd4dXp5M2RFVzhlTER5VW5Ddm9QZWRmZFFDc0hoS0FFNllxTi1fWkRJWlV0Q21BZ0p4VGJKTWJSYWhqZXhNYUNJWkJlalpuczhES2J0cVdfR285Nk42STFTNS1GS19iWWRWOTg2Z2pXZnBLU2J2enBGSEZzNnJwUkpZYm5ZRjVkRnlibkpUMExQeGItaUlkSkhyTHJmbW1DYjQtZjFGU1Z4dWNZaW1WYXEyU2MyZUo2Z0tEMURnOHBhbXFmZUdSemxZNzFhVloxdFB5VlVCT0hPb0E4dF9CNGgzMzVNMGFLbzhRZmQ0bkczcjVxZE9fTWdIRDh6NXdqSm9neXlPR19OcExrem5IdjFMcUtBTTdPdXhKc21TdGpGU2JIaUJjdlF1a2NQMUY4Y3RSV1piWGJtZDNKLVpTZmFHSUs2TnVhZTFJdjhUU2RSTml0ODd0U05Wd2RjMGlRMEFLZ3ZMNnZHUi0yZURKQnoza2piV1FtWERxc3IyaXJNT2dXWENQbmRja3htbVNyRFYyTEtMOW4tWDJfUHctODBXZVR5eHV0OEF0ajRsTEdQNEVyWGZmbGFwUmVCU2Y2X1RtVUNVcjM3YVpnekMyeVUxZ0RzU2kyNDFiYWxrbHoydzVDMmprZ2VhTjVqVXU3Ulk5eV9oT0JFMV9kTkllYU9jbXVEbW1nMUYxYjFqZXZ4QlhqbC1EdFNpM2g2N2JyazhZUXAtVjlBZWR0SGVTZmIzaFVrT2hNa1B3SnV3bEhPaU14eGptZkpCc0VwQl9YeE1ndVJRZDluU0JCaWNSVDBIMEE1d052bjNNR0IwMnVPa0dBaWd0XzEyRE5aWlpnYmJIY2lTdHFlaWhRVURZZ2FFTExVRDhsRDBRUHIydkVvQXUyRVF6VVhrbTNlb1BtdlVFVTFKbTF4VGJYUS1Rc1RXa3J3TEJ0a0NRbXZsbmM0cUVOb2lIUXpoaDFldlQ3ZHBySW9kMm9VQkVLY3RHSVNrVm1zMlJkeFUwOHNISHFJbjhHc2J1MlAxbE5CaXZYTmhZMXlIQTlKZU1hOG5BVXRJUHBDUWNqS2x3THBrUGJoNUp1SUprWlJFbzljS1h3eXVpb21WblA3YkZzY01iMy1Cb1NpWDhSTi05OEZMa204RGF1UGl3YVJoNUNZZFNwNXgyNTlWcXVOLS1zcmtFT0g4NUJTd1c5RkFRRS1KQlcxaUtpYXQyU1NTZDFYNmM1c29aNnRYSktNa2JjNGhjb1o3azh5dGw1bVE1M0haN1U3ck5mRDRvRzVZZVNTSlhlWTM0aktZUENnQjMzN2JJQ2hObkJfdjFJRmpRRDAwZW8zTjEyRjRkbnNfbF8tcnowb3lpQTFsXy1GeW90WGpUUUpocnZKbzFheFBQUEd0VmdtYkxQcXhQbHpBVEtEZjF3OHF6OERZUW9jUmVZOXUwbVBLeUpDRFl1b3VoaTFGZW9GYWdjTnVhZ0ZKNnZVU1BIakh3RkdZZnRrUkZVZEdMYUlPckF2N2wyejVnWkJoeVRPRlU1OUVzMjktbUVNbEFCVDhLVUUxakM5U3dIbFFRNDI2am12dFFmcVg3OWtsUnpJekdFOElFU2QyQUVvVmM0MElHeExFZEd3bkw0eTBQUVpyRUZGQ3ctUzVHVlZyaDM4Ung4ci0wNlp1SVRiRG8wazVnUWpDblFmZ2ZXQlJoOHZDUWVHVjdqWkNxYjJ3aXVIczlmQTZITkZwZjZVM25WcEJiaGtNb1ZDeXNvZjBPLWVQNVdzSXlLVzRSaGxRUWVyMnhyUzJ6X2Vld3Z2NWp0eVdoaTV0QUJOSC1iSWU1aEo5VmJ1VzlPSVJuQnhBRmRZZktyZkNrckJuRUJ5MWVIdUI5QjlJaG1vYWxMc0dNZzU0OWNkOHpadUlnX0k0TG9HMmtieVgtUU5IWThjNUlJQXRfamd4YVllSjdFWklyR2dBV2lmTVd3N3MyZnMtdXV6TjNNM3puZUJHdkFyT0xqVEt2WURzakJOZ1ltYzdNRzdHenBPZkMtX0kzNjJtampCWm9lUHhxVkR3UlMyMFRiUWt0TmFYWS1EVHMxaUFVelpIQnFUN0ZyN2QydXZWUGxYc3kzV2ZlWkJHeEtTS3pONzlZTFl1SG5EOXAwa2RKQ25oNkdLS0F6WlVheVBkcl9ldE5NdzZrcFVXb1ZSTWtoVS1fclM1N3drMndyRko5dmVGSjhDbUZmeVp4V1dPOHBrRnRtNmhNSGlpaWkxVmVyTnFXNzc5X3hzdXk4RnFwVUt4ZGdjbXFPQVdndkxvMVMyMVZBa3lVeUUxRUV1a1JCOFNyMHgwTHl4Um9ROVpYSHBoWUtoVDFLdlRVbDBIaXhiVzZ6T2k3T3dTTHVDa01zbzg4XzNHcTVQMVBtNUVjdFRjdmtLNGtHVklSQzJnQy1NT0NjeWk1YWxGbnhNZEpZUHVsM3pJSkNTZG5DMk8xZXdnVGFnSXhyWmd6Z0xhWWZoeUNibVQzQXgxU3VNSVBmUzgyR1Rud2gzUXFvVEx3U25ON3RmWVlOdEJPaEZwUlhjdXpqM21ZVmtWNmhfeTVMNmpOc0k3eHFlR0RqNmVnX245ZkpESXMtYzhGaEpXSzdGV0hCR1dyTGdrb1kzZW9jVGlXcFlYOHU5S1I2Y2wxeGF2b0NySnh4X2JYV3JZQUFOSk1uOGgtaUEwVFNFMXVocFFYcVNUMEVBczZHNll2VEY5OV9YTlR2NXl0aUJfVGdZWGVremRoVlVfbWdzeUhBOUJQMnBzN2RIVkREYnBKUzB5b1RSeWNHdVJwdVgtbm92dU1SXy1kY185RUtOVlFZejZUQ0FST3JVUC15QzhtSVp1UkNsTHctcFdIbWV2WGRhdUJudmQyQXlIWmNMZGxlWDVyelROVFVWSEFSbTZQN2xqbVh2NjZfanJQTmNBTEFsV1JUWWFTajdOMFNTZnJJTHc4UzMyS2N2MkRHLVBEWHNkdUVzR2JoS0tlQ3RFazhWVENNOHRTamVtbko2S3k3WnhPRkVKWXBfeVdDVW5YWGdoNnJWSjRmV2oxdmczcnpNVFRtY1lkQVRYa2g5V094RUNDT3E2VUhSTEotWmNFOE01SWQ0VUQ2Vm5tR3RxLUdmMlRRWERab3FQUm1nNVJpUzViZWNkU2RmU2dONXcta0pfdzhFY05LLUJYdUVOMF9OMHNycXNyZllDbzljaFdvWXNIRDlGRDFUMFh0YThCR0xHWjl2WTNrTENUNnQ5TFVJNXhucmVxekFlbHVxdFVGbG1jTzRoUnNOMjctdFhWYzFXblhEam5DUktycnJKRzNzZjNiZGtMRGpkQnpOTkhpNE9BdU9BMG5nMEJGZjRUZEJoMWtHUU1UU3FhMFVVZGZPU1M3dVhTenR4c0JvMzdKVjI5ZEN0dE1rYXM1TktUalhYWjZMWVdOd0NvMjhvRWp1eE1mUE05cjk2R2xVZ1hQSTdXM3UtTXh3QnlPOXN5azVOS2VLc05CTFc3cGlTU3pKWkxJVEpLdHdwY1FpRUZqVnQ2NlR5OWFabkhzX0djcTVmVnB5WGpGUjNCM3BybXQwZUJJYVdjRjBsYWtsQkFaTlhCaEFaaXFBLWRQZVRScVJmZjhMSF9JMml3cm9MYVJYSGpZRkJjdjc0ZENyRmM1ZnlZYjVRay0zM3ZycTZ6bGpiV0NUY0JkNzdIN0U4UlZlYkRTdUZtb1R6bUpRWTRQOUdfSER6UGN4V2tqN2lkV2tuVHlZZVhKZz09)
                FCI_PROVISIONING_PROFILE: Encrypted()
                D_SSH_KEY: Encrypted()
            node: latest
            xcode: latest
            cocoapods: default
        triggering:
            events:
                - push
                - tag
                - pull_request
            branch_patterns:
                - pattern: develop
                  include: true
                  source: true
        scripts:
            - name: Install npm dependencies
              script: |
                yarn
            - name: Install CocoaPods dependencies
              script: |
                cd ios && pod install
            - name: Set up keychain to be used for codesigning using Codemagic CLI 'keychain' command
              script: |
                keychain initialize
            - name: Set up Provisioning profiles from environment variables
              script: |
                    PROFILES_HOME="$HOME/Library/MobileDevice/Provisioning Profiles"
                      mkdir -p "$PROFILES_HOME"
                      PROFILE_PATH="$(mktemp "$PROFILES_HOME"/$(uuidgen).mobileprovision)"
                      echo ${FCI_PROVISIONING_PROFILE} | base64 --decode > "$PROFILE_PATH"
                      echo "Saved provisioning profile $PROFILE_PATH"
            - name: Set up signing certificate
              script: |
               echo $FCI_CERTIFICATE | base64 --decode > /tmp/certificate.p12
                  if [ -z ${FCI_CERTIFICATE_PASSWORD+x} ]; then
                    # when using a certificate that is not password-protected
                    keychain add-certificates --certificate /tmp/certificate.p12
                  else
                    # when using a password-protected certificate
                    keychain add-certificates --certificate /tmp/certificate.p12 --certificate-password $FCI_CERTIFICATE_PASSWORD
                  fi
            - name: Set up code signing settings on Xcode project
              script: |
                xcode-project use-profiles
            - name: Build ipa for distribution
              script: |
                xcode-project build-ipa --workspace "$FCI_BUILD_DIR/ios/$XCODE_WORKSPACE" --scheme "$XCODE_SCHEME"
        artifacts:
            - build/ios/ipa/*.ipa
            - /tmp/xcodebuild_logs/*.log
            - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.app
            - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
        publishing:
          # See the following link for details about email publishing - https://docs.codemagic.io/publishing-yaml/distribution/#email
          email:
            recipients:
              - user_1@example.com
              - user_2@example.com
            notify:
              success: true     # To not receive a notification when a build succeeds
              failure: false    # To not receive a notification when a build fails